import os 
import click
from openai import OpenAI
from conversation_rating import rate_conversation

def open_ai_llm(username, cursor):

    conversation_history = []

    client = OpenAI(api_key=os.getenv("OPEN_AI_API_KEY"))

    # Insert user information
    cursor.execute("INSERT or IGNORE INTO user_information (name) VALUES (?)",(username,))
    cursor.execute("SELECT id FROM user_information WHERE name = ?", (username,))
    user_information_id = cursor.fetchone()[0]

    cursor.execute("INSERT INTO user_conversations (user_information_id) VALUES (?)", (user_information_id,))
    conversation_id = cursor.lastrowid


    while True:
        question = click.prompt("Chat GPT - Ask anything you'd like: (type 'exit' to quit)")

        if question.lower() in ["exit"]:
            click.echo("Thanks for chatting!")
            rate_conversation(cursor, conversation_id) #included new function from breakout file structure
            break

        conversation_history.append({"role": "user", "content": question})

        # Insert the initial interaction with a placeholder for the output
        cursor.execute("INSERT INTO user_interactions (conversation_id, input, output) VALUES (?, ?, ?)",
                    (conversation_id, question, None))
        interaction_id = cursor.lastrowid

        chat_completion = client.chat.completions.create(
            messages=conversation_history,
            model='gpt-4'
        )

        answer = chat_completion.choices[0].message.content.strip()
        conversation_history.append({"role": "assistant", "content": answer})

        # Update the existing interaction with the actual output
        cursor.execute("UPDATE user_interactions SET output = ? WHERE interaction_id = ?",
                    (answer, interaction_id))

        click.echo(f"ChatGPT says: {answer}")